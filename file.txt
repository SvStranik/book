output = open(r'С:\spam', 'w')                              # Создает выходной файл
                                                            # ('w' означает write — запись)
input = open ('data', 'r')                                  # Создает входной файл
                                                            # ('r' означает read — чтение)
input = open(/data')                                        # То же, что и в предыдущей строке
                                                            # ('r' выбирается по умолчанию)
aString = input.read()                                      # Читает целый файл в одиночную строку
aString = input.read(N)                                     # Читает до N следующих символов (или байтов) в строку
aString = input.readline()                                  # Читает следующую строку файла (включая символ новой строки \n) в строку
aList - input.readlines()                                   # Читает целый файл в список строк (с символами \n)
output.write(aString)                                       # Записывает строку символов (или байтов) в файл
output.writelines(aList)                                    # Записывает все строки из списка в файл
output.close()                                              # Вручную закрывает файл (это делается автоматически, 
                                                            # когда файловый объект подвергается сборке мусора)
output.flush()                                              # Сбрасывает буфер вывода на диск, не за- крывая файл
anyFile.seek(N)                                             # Изменяет позицию на N для следующей операции
for line in open('data'):                                   # Файловые итераторы, читающие строку за строкой
   использовать строку
open('f.txt', encoding='latin-1')                           # Текстовые файлы Unicode в Python З.Х (строки str) 
open('f.bin', 'rb')                                         # Байтовые файлы в Python З.Х (строки bytes)
codecs.open('f.txt', encoding='utf8')                       # Текстовые файлы Unicode в Python 2.Х (строки unicode)
open('f.bin', 'rb')                                         # Байтовые файлы в Python 2.Х (строки str)

>>> myfile = open('myfile.txt', 'w')                        # Открытие файла для текстового
                                                            # вывода: создание/очистка
>>> myfile.write('hello text file\n')                       # Запись строки текста: строковый объект
>>> myfile.close()                                          # Сброс выходных буферов на диск
>>> myfile.readline()                                       # Чтение строк
>>> open('myfile.txt').read()                               # Чтение сразу всего файла в строковый объект
>>> print(open('myfile.txt').read())                        # Дружественное к пользователю отображение
>>> for line in open('myfile.txt'):                         # Использование файловых итераторов,
        print(line, end='')                                 # а не чтения
>>> open(R'С:\Python33\Lib\pdb.py').readline()              # '#1 /usr/bin/env python3\n'
>>> open('С:/Python33/Lib/pdb.py').readline()               # '#1 /usr/bin/env python3\n'
>>> open('C:\\Fython33\\Lib\\pdb.py').readline()            # '#1 /usr/bin/env python3\n'

line.rstrip()                                               # Удаление символа конца строки
Преобразование в целые числа
>>> line = F.readline() >>> '43,44,45\n' >>> parts=line.split(',') >>> ['43','44','45\n']
>>> numbers = [int(P) for Р in parts]                       # [43, 44, 45]

Модуль pickle является более развитым инструментом, который позволяет сохранять почти любой объект Python в файл напрямую,
не требуя с нашей стороны каких-либо преобразований в и из строки. 
Он похож на крайне универсальную утилиту форматирования и разбора данных. Скажем, вот как сохранить словарь в файл:
>>> D = {'a':1,'b':2}
>>> F = open('datafile.pkl','wb')
>>> import pickle
>>> pickle.dump(D,F)                                        # Сохранение любого объекта в файл с помощью pickle
>>> F.close()
Чтобы позже получить словарь обратно, мы просто снова применяем pickle для его воссоздания:
>>> F = open('datafile.pkl','rb')
>>> E = pickle.load(F)                                      # Загрузка любого объекта из файла
>>> Е                                                       # { ’а’ : 1, ’Ь’: 2}

