Операторы Python

Оператор                    Роль                    Пример
Присваивания                Создание ссылок         a, b = 'good','bad'
Вызовы и другие выражения   Выполнение функций      log.write('spam, ham')
Вызовы print                Вывод объектов          print ('The Killer', joke)
if/elif/else                Выбор действий          if "python" in text: print(text)
for/else                    Итерация                for x in mylist: print(x)
while/else                  Yниверсальные циклы     while X > Y: print('hello')
pass                        Пустой заполнитель      while True: pass
break                       Выход из цикла          while True: if exittest(): break
continue                    Продолжение цикла       while True: if skiptest(): continue
def                         Функции и методы        def f(a, b, c=l, *d): print(a+b+c+d[0])
return                      Результаты функций      def f(a, b, c=l, *d): return a+b+c+d[0]
yield                       Генераторные функции    def gen(n): for i in n: yield i*2
global                      Пространства имен       х = 'old' 
                                                    def function(): global x, у; x = 'new'
nonlocal                    Пространства имен       def outer(): 
                            (Python З.Х)                x = 'old'
                                                        def function():
                                                            nonlocal x; x = 'new'
import                      Доступ к модулям        import sys
from                        Доступ к атрибутам      from sys import stdin
class                       Построение объектов     class Subclass(Superclass):
                                                        staticData = [ ]
                                                        def method (self) : pass
try/except/                 Перехват исключений     try:
finally                                                 action()
                                                    except:
                                                        print(’action error’)
raise                       Генерация исключений    raise EndSearch(location)
assert                      Отладочные проверки     assert X > Y, 'X too small'
with/as                     Диспетчеры контекста    with open ('data ’) asmyfile: 
                            (Python З.Х, 2.6+)          process(myfile)
del                         Удаление ссылок         del data[k]
                                                    del data[i:j] 
                                                    del obj.attr 
                                                    del variable

Операторы присваивания
spam, ham = 'yum','YUM'                             # Присваивание кортежа (позиционное)
[spam, ham] = ['yum', 'YUM']                        # Присваивание списка (позиционное)
a, b, c, d = 'spam'                                 # Присваивание последовательности, обобщенное
a, *b = 'spam'                                      # Расширенная распаковка последовательности
spam = ham = 'lunch'                                # Групповое присваивание
spams +=42                                          # Дополненное присваивание (эквивалентно spams = spams + 42)

Формат вызова print
print([ object, ...][, sep=''] [, end='\n'] [,file=sys.stdout][, flush=False])

### Тернарное выражение if/else

А = Y if X else Z 
>>> b = 3;a =1
>>> a += 1 if b == 4 else -1                        # 0 Лож
>>> a += 1 if b == 3 else -1                        # 2 Истина
>>> [a-1,a+1][b == 3]                               # 2 Истина
>>> [a-1,a+1][b == 4]                               # 0 Лож
>>> L = [1,2,"","23",[],'re','']
>>> [per for per in L if per]                       # [1, 2, '23', 're']

Параллельные обходы: zip и map

>>> L2 = [5,6,7,8]
>>> L1 = [1,2,3,4]
>>> zip(L1,L2)                                      # zip object at 0x0000022E2D6BFC40>
>>> list(zip(L1,L2))                                # [(1, 5), (2, 6), (3, 7), (4, 8)]
>>> [[x,y] for (x,y) in zip(L1,L2)]                 # [[1, 5], [2, 6], [3, 7], [4, 8]]
Словари
>>> keys = ['spam', 'eggs', 'toast']
>>> vals = [1, 3, 5]
>>> D2 = {} 
>>> for (k,v) in zip(keys,vals): D2[k] = v          # {'spam': 1, 'eggs': 3, 'toast': 5}
>>> D3 = dict(zip(keys, vals))                      # {'spam': 1, 'eggs': 3, 'toast': 5}
>>> {k:v for (k,v) in zip(keys, vals)}              # {'spam': 1, 'eggs': 3, 'toast': 5}

Генерация смещений и элементов: enumerate

>>> S = 'spam'
>>> for (i,j) in enumerate(S):                      # 0 - s
	print(i,'-',j)                                  # 1 - p
                                                    # 2 - a
                                                    # 3 - m
>>> [(i,j) for (i,j) in enumerate(S)]               # [(0, 's'), (1, 'p'), (2, 'a'), (3, 'm')]
>>> [с * i for (i,с) in enumerate(S)]               # ['', 'p', 'aa', 'mmm']

Вывод характеристик ПК
>>> import os
>>> for line in os.popen('systeminfo'): print(line.rstrip())

-----------Итерации и включения-------------------------------------------------------------
>>> for x in (1,2,3,4): print(x ** 3,end=' ')       # 1 8 27 64 
>>> L = [1, 2, 3]
>>> I = iter(L)
>>> I.__next__()                                    # 1
>>> I.__next__()                                    # 2
>>> next(I)                                         # 3

>>> D = dict(a=1, b=2, с=3)                         # {'a': 1, 'b': 2, 'с': 3}
>>> list(D.keys())                                  # ['a', 'b', 'с']
>>> list(D.values())                                # [1, 2, 3]
>>> list(D.items())                                 # [('a', 1), ('b', 2), ('с', 3)]
>>> for (k, v) in D.items(): print(k,v, end=' ')    # a 1 b 2 с 3 