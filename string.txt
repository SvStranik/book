Строковы литералы и операции
S = r'\temp\spam' # Неформатированные строки (без управляющих символов)
S = b’sp\xc4m' # Байтовые строки
S = u’sp\u00c4m' # Строки Unicode

Символы, представляемые в строке посредством обратной косой черты
\новая строка                 #Игнорируется (строка продолжения)
\\                            #Обратная косая черта (сохраняет один символ \)
\’                            #Одинарная кавычка (сохраняет ’)
\"                            #Двойная кавычка (сохраняет ”)
\a                            #Звонок
\b                            #Забой
\f                            #Перевод страницы
\n                            #Новая строка (перевод строки)
\r                            #Возврат каретки
\t                            #Горизонтальная табуляция
\v                            #Вертикальная табуляция
\xhh                          #Символ с шестнадцатеричным значением hh (точно 2 цифры)
\ооо                          #Символ с восьмеричным значением ооо (до 3 цифр)
\0                            #Пустой: двоичный символ 0 (не конец строки)
\N{ идентификатор }           #Идентификатор базы данных Unicode
\uhhhh                        #Символ Unicode с 16-битным шестнадцатеричным значением
\Uhhhhhhh                     #Символ Unicode с 32-битным шестнадцатеричным значением3
\остальное                    #Не управляющая последовательность (сохраняет \ и остальное)

Выражения форматирования строк
Выражение форматирования строк: ' . . . %s. . . ' % (значения)
Вызов метода форматирования строк: '... {} ...'.format (значения)
>>> 'That is %d %s bird!' % (1, 'dead') #That is 1 dead bird!
>>> per = 'Ni'
>>> 'The knights who say %s!' % per #  'The knights who say Ni!'
>>> '%d %s %g you' % (1, 'spam', 4.0) # ' 1 spam 4 you '

Коды типов в форматировании строк
s           #Строка (или строка str (X) любого объекта)
r           #То же, что и s, но применяется rерr, а не str
с           #Символ (int или str)
d           #Десятичное число (целое число с основанием 10)
i           #Целое число
u           #То же, что и d (устарел: больше не является беззнаковым)
o           #Восьмеричное целое число (с основанием 8)
х           #Шестнадцатеричное целое число (с основанием 16)
х           #То же, что и х, но в верхнем регистре
е           #Число с плавающей точкой со степенью, в нижнем регистре
Е           #То же, что и е, но в верхнем регистре
f           #Десятичное число с плавающей точкой
F           #То же, что и f, но в верхнем регистре
g           #Число с плавающей точкой е или f
G           #Число с плавающей точкой Е или F
%           #Литерал % (записывается как %%)

% [ (имя ключа) ] [флаги] [ширина] [. точность] код типа

>>> x = 1234
>>> res = '...%d...%-6d...%06d' % (x,x,x)                   # '...1234...1234  ...001234'

>>> х = 1.23456789
>>> '%e | %f | %g' % (x, x, x)                              #'1.234000e+03 | 1234.000000 | 1234'
>>> '%(qty) d more %(food) s' % {'qty': 1, 'food': 'spam'}  #' 1 more spam'

>>> reply = """
Greetings...
Hello %(name)s!
Your age is %(age) s"""
>>> values = { 'name' : 'Bob' , 'age' : 40}
>>> print(reply % values)
#
#Greetings...
#Hello Bob!
#Your age is 40

>>> template = '{0}, {1} and {2}'
>>> template.format('spam', 'ham', 'eggs')                  #'spam, ham and eggs'

>>> template = '{motto}, {pork} and {food}'
>>> template.format(motto='spam', pork='ham', food='eggs')  #'spam, ham and eggs'

>>> template = '%s, %s and %s'
>>> template % ('spam', 'ham', 'eggs')                      #'spam, ham and eggs'

>>> 'My {map[kind]} runs {sys.platform}'.format(sys=sys, map={'kind': 'laptop'}) #'My laptop runs win32'

>>> somelist = list ('SPAM')
>>> 'first=={0[0]} , third={0[2]}'.format(somelist) #'first==S , third=A'

Более сложные примеры использования методов форматирования

{имя__поля компонент ! флаг_преобразования : спецификатор_формата}

Часть спецификатор-формат а после символа двоеточия имеет собственный расширенный формат и 
формально описывается так (квадратные скобки обозначают необязательные компоненты и записываться буквально не должны):
[[заполнение] выравнивание] [знак] [#] [0] [ширина] [,] [.точность] [код_типа]

>>> '{1:10} = {0:10}'.format('spam',123.4567)               # '  123.4567 = spam      '
>>> '{0:>10} = {1:<10}'.format('spam', 123.4567)            # '      spam = 123.4567  '
>>> '{1:>10} = {0:<10}'.format('spam', 123.4567)            # '  123.4567 = spam      '
>>> '%(plat)10s - %(kind)-10s' % dict(plat=sys.platform, kind='laptop') # '     win32 - laptop    '
>>> '{0:d}'.format(999999999999) # '999999999999'  >>> '{0:,d}'.format(999999999999) #'999,999,999,999'
>>> '{:,.2f}'.format(8734873296999.2567)   #'8,734,873,296,999.26'

Дополнительные возможности:
"батарейки" для специальных случаев или универсальные методики

>>> '{0:b}'.format((2 ** 16) - 1)                           # '1111111111111111' Код двоичного форматa
>>> '%s' % bin((2 ** 16) - 1)                               # '0b1111111111111111'
>>> '%s' % bin((2**16)-1)[2:]                               # '1111111111111111'
>>> '{}'.format(bin((2 ** 16) - 1))                         #'0b1111111111111111'

Гибкий синтаксис ссылок: дополнительная сложность и частичное совпадение функциональности

>>> D = dict(name='Bob', job='dev')
>>> '{0[name]} {0[job]} {0[name]}'.format(D)                # 'Bob dev Bob'
>>> '{name} {job} {name}'.format(**D)                       # 'Bob dev Bob'
>>> '%(name)s %(job)s %(name)s' % D                         # 'Bob dev Bob'