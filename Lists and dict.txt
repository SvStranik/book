Списки

>>> L = [0]
>>> L.append([1,2,3])                                       # [0, [1, 2, 3]]
>>> L.extend([4,5,6])                                       # [0, [1, 2, 3], 4, 5, 6]
>>> L.reverse()                                             # [6, 5, 4, [1, 2, 3], 0]
>>> L.pop()                                                 # [6, 5, 4, [1, 2, 3]]

Метод pop принимает также необязательное смещение элемента, который необходимо удалить и возвратить 
(по умолчанию берется последний элемент со смещением -1). 
Другие списковые методы удаляют элемент по значению (remove), вставляют элемент по смещению (insert), 
подсчитывают количество вхождений (count) и находят смещение элемента (index — поиск индекса элемента;
 не путайте его с индексацией!)

>>> L.index([1, 2, 3])                                      # 3
>>> L.insert(4, 7)                                          # [6, 5, 4, [1, 2, 3], 7]
>>> L.remove([1, 2, 3])                                     # [6, 5, 4, 7]
>>> L.count(5)                                              # 1
>>> del L[0]                                                # [5, 4, 7]

Словари

D = {}                                                      #Пустой словарь
D= {'name':'Bob', 'age':40}                                 #Двухэлементный словарь
E = {'cto':
  {'name':'Bob', 'age':40}}                                 #Вложение
D = dict(name='Bob', age= 40)                                #Альтернативные методики создания:
D = dict([('name', 'Bob'), ('age', 40)])                    #ключевые слова, пары “ключ/значение”,
D = dict(zip(keyslist, valueslist))                         # упако- ванные пары “ключ/значение”, списки ключей
D = dict.fromkeys (['name', 'age'] )

D['name']                                                   #Индексирование по ключу
Е['cto']['age']

'age' in D                                                  #Членство: проверка присутствия ключа
D.keys()                                                    #Методы: все ключи,
D.values()                                                  #все значения,
D.items()                                                   #все кортежи ключ+значение,
D.copy()                                                    #копирование (верхнего уровня),
D.clear()                                                   #очистка (удаление всех элементов),
D.update(D2)                                                #объединение по ключам,
D.get(key, default?)                                        #извлечение по ключу; если отсутствует, тогда
                                                            #возвратить стандартное значение (или None),
D.pop(key, default?)                                        #удаление по ключу; если отсутствует, тогда возвратить 
                                                            #стандартное значение (или ошибку) 
D.setdefault(key, default?)                                 #установка по ключу;
                                                            #если отсутствует, тогда установить в стандартное значение (или None)
D.popitem()                                                 #удаление/возвращение любой пары (ключ, значение); и т.д.
len(D)                                                      #Длина: количество сохраненных элементов
D[key] = 42                                                 #Добавление ключей, изменение значений, связанных с ключами
del D[key]                                                  #Удаление элементов по ключу
list(D.keys())                                              #Словарные представления (Python З.Х)
D1.keys() & D2.keys()
D = {x: x*2 for x in range (10) }                           #Включения словаря (Python З.Х, 2.7)

>>> S = {'pik1':1,'pik2':2,'pik3':3}                        # {'pik1': 1, 'pik2': 2, 'pik3': 3}
>>> list(S.values())                                        # [1, 2, 3]
>>> list(S.items())                                         # [('pik1', 1), ('pik2', 2), ('pik3', 3)]
>>> S.get('pik2')                                           # 2
>>> print(S.get('pik4'))                                    # None
>>> S.get('pik4',4)                                         # 4
>>> S = {'pik1': 1, 'pik2': 2, 'pik3': 3} >>> S1 = {'pik4':4,'pik3':33,'pik5':5}
>>> S.update(S1)                                            # {'pik1': 1, 'pik2': 2, 'pik3': 33, 'pik4': 4, 'pik5': 5}

>>> for i in S:
	      print(i + '\t' + str(S[i]))                         # pik1	1\n pik2	2\n pik3	33\n pik4	4\n pik5	5

>>> [pik for (pik,i) in S.items() if i == 33]               # ['pik3'] 
>>> S = {}
>>> S[(1,2,3)] = 100
>>> S[(2,3,4)] = 200                                        # {(1, 2, 3): 100, (2, 3, 4): 200}
>>> S.get((1,2,3),0)                                        # 100
>>> S.get((100,2,3),0)                                      # 0

>>> D = dict(name='Bob', age=40)                            # {'name': 'Bob', 'age': 40}
>>> D = dict([('name','Bob'),('age', 140)])                 # {'name': 'Bob', 'age': 140}
>>> D = {'name':'Bob','age': 240}                           # {'name': 'Bob', 'age': 240}
>>> D = dict.fromkeys(['a','b'],100)                        # {'a': 100, 'b': 100}

>>> D = dict(zip(['a','b','c'],[1,2,3]))                    # {'a': 1, 'b': 2, 'c': 3}
>>> D = {k: v for (k, v) in zip (['a','b','c'], [1, 2, 3])} # {'a': 1, 'b': 2, 'c': 3}
>>> D = {с.lower() : с + '!' for с in ['SPAM','EGGS','НАМ']} # {'spam': 'SPAM!', 'eggs': 'EGGS!', 'нам': 'НАМ!'}
>>> D = {k:0 for k in ['a','b','c']}                        # {'a': 0, 'b': 0, 'c': 0}

>>> K = list(D.keys())                                      # ['a', 'b', 'c']
>>> K = list(D.values())                                    # [0, 0, 0]
>>> K = list(D.items())                                     # [('a', 0), ('b', 0), ('c', 0)]

import dbm
file = dbm.open("filename”)                                 # Связаться с файлом file [’key'] = 'data' # Сохранить данные по ключу
data = file ['key']                                         # Извлечь данные по ключу

Методы append и extend увеличивают список на месте, методы sort и reverse упорядочивают и обращают списки,
метод insert вставляет элемент по смещению, методы remove и pop удаляют элемент из списка по значению и по позиции,
оператор del удаляет элемент или срез, а операторы присваивания по индексам и по срезам заменяют элемент или целую секцию. 
